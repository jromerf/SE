/**
 * Author: Javier Romero Flores
 * Description:
 * Composicion de frases completas para la matriz de 8 displays
 * */

#ifndef FRASES_COMPUESTAS_H
#define FRASES_COMPUESTAS_H

#include "keypad.h"
#include "caracteres.h"
#include <time.h>
#include <stdlib.h>

const int inicio[8][7] = {	{0x15,0x00,0x10,0x00,0x10,0x00,0x15},
							{0x0A,0x00,0x00,0x00,0x00,0x00,0x0A},
							{0x00,0x07,0x04,0x07,0x01,0x07,0x00},
							{0x00,0x0E,0x04,0x04,0x04,0x04,0x00},
							{0x00,0x1D,0x15,0x15,0x15,0x1D,0x00},
							{0x02,0x18,0x08,0x18,0x00,0x00,0x02},
							{0x0A,0x00,0x00,0x00,0x00,0x00,0x0A},
							{0x15,0x00,0x01,0x00,0x01,0x00,0x15}};


void normalDelay(){
	int c;
	for ( c = 1 ; c <= 1500 ; c++ ){}
}

void slowDelay(){
	int c,j;

	for ( c = 1 ; c <= 13500 ; c++ ){
		for ( j = 1 ; j <= 250 ; j++ ){}
	}

	//for(c = 1; c <= 843750;c++){}
}

void aSecondDelay(){
	int c,j;

	for ( c = 1 ; c <= 13500 ; c++ ){
		for ( j = 1 ; j <= 63 ; j++ ){}
	}
}

/*Function to wait until player touch F  */
Xuint32 waitingCode(){
	int c,j;
	Xuint32 dato,value;
	for ( c = 1 ; c <= 13500 ; c++ ){
		for ( j = 1 ; j <= 63 ; j++ ){
			value = KEYPAD_mReadReg(XPAR_KEYPAD_0_BASEADDR,0);
			dato = (value>>28) & 0xF;
			//KEYPAD_mWriteReg(XPAR_KEYPAD_0_BASEADDR,0,0);
			if(dato == 0xF){
				break;
			}
		}
	}
	return dato;
}
/*
void write_winner(Xuint8 dir){
	write_W_DIR(0,dir);
	write_I_DIR(1,dir);
	write_N_DIR(2,dir);
	write_N_DIR(3,dir);
	write_E_DIR(4,dir);
	write_R_DIR(5,dir);
	write_smile(6);
}

void write_looser(Xuint8 dir){
	write_L_DIR(0,dir);
	write_O_DIR(1,dir);
	write_O_DIR(2,dir);
	write_S_DIR(3,dir);
	write_E_DIR(4,dir);
	write_R_DIR(5,dir);
	write_sad(6);
}
/*
void mostrarCartasLetras(Xuint32 dir){
	write_A_DIR(0,dir);
	write_diamante_DIR(1,dir);
	write_B_DIR(2,dir);
	write_diamante_DIR(3,dir);
	write_C_DIR(4,dir);
	write_diamante_DIR(5,dir);
	write_D_DIR(6,dir);
	write_diamante_DIR(7,dir);
}*/

void mostrarCartasNumeros(Xuint32 dir){
	write_1_DIR(0,dir);
	write_diamante_DIR(1,dir);
	write_2_DIR(2,dir);
	write_diamante_DIR(3,dir);
	write_3_DIR(4,dir);
	write_diamante_DIR(5,dir);
	write_4_DIR(6,dir);
	write_diamante_DIR(7,dir);
}
/*
void cuentaAtras(){
	aSecondDelay();
	BANNER_inicializa();
	write_4_DIR(3,TURN_QUIET);
	aSecondDelay();
	BANNER_inicializa();
	write_3_DIR(3,TURN_QUIET);
	aSecondDelay();
	BANNER_inicializa();
	write_2_DIR(3,TURN_QUIET);
	aSecondDelay();
	BANNER_inicializa();
	write_1_DIR(3,TURN_QUIET);
	aSecondDelay();
	BANNER_inicializa();
}
*/


Xuint32 cuentaAtras(){
	Xuint32 cnt = 4,dato;
	aSecondDelay();
	while(cnt>0){
		BANNER_inicializa();

		switch(cnt){
		case 4:
			write_4_DIR(3,TURN_QUIET);
			break;
		case 3:
			write_3_DIR(3,TURN_QUIET);
			break;
		case 2:
			write_2_DIR(3,TURN_QUIET);
			break;
		case 1:
			write_1_DIR(3,TURN_QUIET);
			break;
		}
		dato = waitingCode();
		if(dato == 0xF){
			xil_printf("dato: %08x",dato);
			break;
		}
		cnt--;
		xil_printf("cnt: %d",cnt);
		KEYPAD_mWriteReg(XPAR_KEYPAD_0_BASEADDR,0,0);
	}
	return cnt;
}


/*
Xuint32 cuentaAtras(){
	Xuint32 cnt = 4,value,dato;
	value = KEYPAD_mReadReg(XPAR_KEYPAD_0_BASEADDR,0);
	dato = (value>>28) & 0xF;
	KEYPAD_mWriteReg(XPAR_KEYPAD_0_BASEADDR,0,0);

	while(cnt>0 &&dato != 0x0 ){
		switch(cnt){
		case 4:
			write_4_DIR(3,TURN_QUIET);
			break;
		case 3:
			write_3_DIR(3,TURN_QUIET);
			break;
		case 2:
			write_2_DIR(3,TURN_QUIET);
			break;
		case 1:
			write_1_DIR(3,TURN_QUIET);
			break;
		case 0:
			write_0_DIR(3,TURN_QUIET);
			break;
		}
		aSecondDelay();
		BANNER_inicializa();
		cnt--;
		dato = (value>>28) & 0xF;
		value = KEYPAD_mReadReg(XPAR_KEYPAD_0_BASEADDR,0);
		xil_printf("se ha leido %01x \n\r",dato);
	   KEYPAD_mWriteReg(XPAR_KEYPAD_0_BASEADDR,0,0);
	}

	return cnt;
}*/


void showCard(Xuint8 card,Xuint8 col){
	switch(card){
	case 1:
		write_A_DIR(col,TURN_QUIET);
		break;
	case 2:
		write_B_DIR(col,TURN_QUIET);
			break;
	case 3:
		write_C_DIR(col,TURN_QUIET);
			break;
	case 4:
		write_D_DIR(col,TURN_QUIET);
			break;
	case 5:
		write_E_DIR(col,TURN_QUIET);
			break;
	case 6:
		write_F_DIR(col,TURN_QUIET);
			break;
	case 7:
		write_G_DIR(col,TURN_QUIET);
			break;
	case 8:
		write_H_DIR(col,TURN_QUIET);
			break;
	case 9:
		write_I_DIR(col,TURN_QUIET);
			break;
	case 10:
		write_J_DIR(col,TURN_QUIET);
			break;
	case 11:
		write_K_DIR(col,TURN_QUIET);
			break;
	case 12:
		write_L_DIR(col,TURN_QUIET);
			break;
	case 13:
		write_M_DIR(col,TURN_QUIET);
			break;
	case 14:
		write_N_DIR(col,TURN_QUIET);
			break;
	case 15:
		write_O_DIR(col,TURN_QUIET);
			break;
	case 16:
		write_P_DIR(col,TURN_QUIET);
			break;
	case 17:
		write_Q_DIR(col,TURN_QUIET);
			break;
	case 18:
		write_R_DIR(col,TURN_QUIET);
			break;
	case 19:
		write_S_DIR(col,TURN_QUIET);
			break;
	case 20:
		write_T_DIR(col,TURN_QUIET);
			break;
	case 21:
		write_U_DIR(col,TURN_QUIET);
			break;
	case 22:
		write_V_DIR(col,TURN_QUIET);
			break;
	case 23:
		write_W_DIR(col,TURN_QUIET);
			break;
	case 24:
		write_X_DIR(col,TURN_QUIET);
			break;
	case 25:
		write_Y_DIR(col,TURN_QUIET);
			break;
	case 26:
		write_Z_DIR(col,TURN_QUIET);
			break;
	}

}

void ciudad(Xuint8 dir){
	write_diamante_DIR(0,dir);
	write_C_DIR(1,dir);
	write_I_DIR(2,dir);
	write_U_DIR(3,dir);
	write_D_DIR(4,dir);
	write_A_DIR(5,dir);
	write_D_DIR(6,dir);
	write_diamante_DIR(7,dir);
}

void nombre(Xuint8 dir){
	write_diamante_DIR(0,dir);
	write_N_DIR(1,dir);
	write_O_DIR(2,dir);
	write_M_DIR(3,dir);
	write_B_DIR(4,dir);
	write_R_DIR(5,dir);
	write_E_DIR(6,dir);
	write_diamante_DIR(7,dir);
}

void fruta(Xuint8 dir){
	write_diamante_DIR(0,dir);
	write_F_DIR(1,dir);
	write_R_DIR(2,dir);
	write_U_DIR(3,dir);
	write_T_DIR(4,dir);
	write_A_DIR(5,dir);
	write_diamante_DIR(6,dir);
}

void color(Xuint8 dir){
	write_diamante_DIR(0,dir);
	write_C_DIR(1,dir);
	write_O_DIR(2,dir);
	write_L_DIR(3,dir);
	write_O_DIR(4,dir);
	write_R_DIR(5,dir);
	write_diamante_DIR(6,dir);
}

void animal(Xuint8 dir){
	write_diamante_DIR(0,dir);
	write_A_DIR(1,dir);
	write_N_DIR(2,dir);
	write_I_DIR(3,dir);
	write_M_DIR(4,dir);
	write_A_DIR(5,dir);
	write_L_DIR(6,dir);
	write_diamante_DIR(7,dir);
}

void cosa(Xuint8 dir){
	write_diamante_DIR(0,dir);
	write_C_DIR(2,dir);
	write_O_DIR(3,dir);
	write_S_DIR(4,dir);
	write_A_DIR(5,dir);
	write_diamante_DIR(7,dir);
}

void showRandomQuestion(Xuint8 dir){
	Xuint32 num = rand()%6;
	xil_printf("num: %d\n",num);
	switch(num) {
	case 0:
		ciudad(dir);
		break;
	case 1:
		nombre(dir);
		break;
	case 2:
		fruta(dir);
		break;
	case 3:
		color(dir);
		break;
	case 4:
		animal(dir);
		break;
	case 05:
		break;
	}
}

void startGame(){

	BANNER_inicializa();
	int i, j;

	for(i = 0; i < 8; i++){
		for(j = 0; j < 7; j++){
			BANNER_enviarcondireccion(i,j,inicio[i][j],TURN_QUIET);
		}
	}
	/*
	BANNER_enviarcondireccion(0,0,0x15,TURN_QUIET);
	BANNER_enviarcondireccion(0,1,0x00,TURN_QUIET);
	BANNER_enviarcondireccion(0,2,0x10,TURN_QUIET);
	BANNER_enviarcondireccion(0,3,0x00,TURN_QUIET);
	BANNER_enviarcondireccion(0,4,0x10,TURN_QUIET);
	BANNER_enviarcondireccion(0,5,0x00,TURN_QUIET);
	BANNER_enviarcondireccion(0,6,0x15,TURN_QUIET);

	BANNER_enviarcondireccion(1,0,0x0A,TURN_QUIET);
	BANNER_enviarcondireccion(1,1,0x00,TURN_QUIET);
	BANNER_enviarcondireccion(1,2,0x00,TURN_QUIET);
	BANNER_enviarcondireccion(1,3,0x00,TURN_QUIET);
	BANNER_enviarcondireccion(1,4,0x00,TURN_QUIET);
	BANNER_enviarcondireccion(1,5,0x00,TURN_QUIET);
	BANNER_enviarcondireccion(1,6,0x0A,TURN_QUIET);

	BANNER_enviarcondireccion(2,0,0x00,TURN_QUIET);
	BANNER_enviarcondireccion(2,1,0x07,TURN_QUIET);
	BANNER_enviarcondireccion(2,2,0x04,TURN_QUIET);
	BANNER_enviarcondireccion(2,3,0x07,TURN_QUIET);
	BANNER_enviarcondireccion(2,4,0x01,TURN_QUIET);
	BANNER_enviarcondireccion(2,5,0x07,TURN_QUIET);
	BANNER_enviarcondireccion(2,6,0x00,TURN_QUIET);

	BANNER_enviarcondireccion(3,0,0x00,TURN_QUIET);
	BANNER_enviarcondireccion(3,1,0x0E,TURN_QUIET);
	BANNER_enviarcondireccion(3,2,0x04,TURN_QUIET);
	BANNER_enviarcondireccion(3,3,0x04,TURN_QUIET);
	BANNER_enviarcondireccion(3,4,0x04,TURN_QUIET);
	BANNER_enviarcondireccion(3,5,0x04,TURN_QUIET);
	BANNER_enviarcondireccion(3,6,0x00,TURN_QUIET);

	BANNER_enviarcondireccion(4,0,0x00,TURN_QUIET);
	BANNER_enviarcondireccion(4,1,0x1D,TURN_QUIET);
	BANNER_enviarcondireccion(4,2,0x15,TURN_QUIET);
	BANNER_enviarcondireccion(4,3,0x15,TURN_QUIET);
	BANNER_enviarcondireccion(4,4,0x15,TURN_QUIET);
	BANNER_enviarcondireccion(4,5,0x1D,TURN_QUIET);
	BANNER_enviarcondireccion(4,6,0x00,TURN_QUIET);

	BANNER_enviarcondireccion(5,0,0x02,TURN_QUIET);
	BANNER_enviarcondireccion(5,1,0x18,TURN_QUIET);
	BANNER_enviarcondireccion(5,2,0x08,TURN_QUIET);
	BANNER_enviarcondireccion(5,3,0x18,TURN_QUIET);
	BANNER_enviarcondireccion(5,4,0x00,TURN_QUIET);
	BANNER_enviarcondireccion(5,5,0x00,TURN_QUIET);
	BANNER_enviarcondireccion(5,6,0x02,TURN_QUIET);

	BANNER_enviarcondireccion(6,0,0x0A,TURN_QUIET);
	BANNER_enviarcondireccion(6,1,0x00,TURN_QUIET);
	BANNER_enviarcondireccion(6,2,0x00,TURN_QUIET);
	BANNER_enviarcondireccion(6,3,0x00,TURN_QUIET);
	BANNER_enviarcondireccion(6,4,0x00,TURN_QUIET);
	BANNER_enviarcondireccion(6,5,0x00,TURN_QUIET);
	BANNER_enviarcondireccion(6,6,0x0A,TURN_QUIET);

	BANNER_enviarcondireccion(7,0,0x15,TURN_QUIET);
	BANNER_enviarcondireccion(7,1,0x00,TURN_QUIET);
	BANNER_enviarcondireccion(7,2,0x01,TURN_QUIET);
	BANNER_enviarcondireccion(7,3,0x00,TURN_QUIET);
	BANNER_enviarcondireccion(7,4,0x01,TURN_QUIET);
	BANNER_enviarcondireccion(7,5,0x00,TURN_QUIET);
	BANNER_enviarcondireccion(7,6,0x15,TURN_QUIET);
*/
	slowDelay();
	slowDelay();
	BANNER_inicializa();
}

#endif /** FRASES_COMPUESTAS_H */
