/*
 *
 * Xilinx, Inc.
 * XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A 
 * COURTESY TO YOU.  BY PROVIDING THIS DESIGN, CODE, OR INFORMATION AS
 * ONE POSSIBLE   IMPLEMENTATION OF THIS FEATURE, APPLICATION OR 
 * STANDARD, XILINX IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION 
 * IS FREE FROM ANY CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE 
 * FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION
 * XILINX EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO 
 * THE ADEQUACY OF THE IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO 
 * ANY WARRANTIES OR REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE 
 * FROM CLAIMS OF INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY 
 * AND FITNESS FOR A PARTICULAR PURPOSE.
 */

/*
 * 
 *
 * This file is a generated sample test application.
 *
 * This application is intended to test and/or illustrate some 
 * functionality of your system.  The contents of this file may
 * vary depending on the IP in your system and may use existing
 * IP driver functions.  These drivers will be generated in your
 * SDK application project when you run the "Generate Libraries" menu item.
 *
 */


#include <stdio.h>
#include "xparameters.h"
#include "xil_cache.h"
#include "xbasic_types.h"
#include "xbram.h"
#include "bram_header.h"
#include "leds_rgb.h"

void delay(){
	int c,d;
	for ( c = 1 ; c <= 100 ; c++ )
	   for ( d = 1 ; d <= 100 ; d++ )
	       {}
}

void arcoiris(){
	LEDS_RGB_mWriteSlaveReg0(XPAR_LEDS_RGB_2_BASEADDR,0,255);
	LEDS_RGB_mWriteSlaveReg1(XPAR_LEDS_RGB_2_BASEADDR,0,0);
	LEDS_RGB_mWriteSlaveReg2(XPAR_LEDS_RGB_2_BASEADDR,0,0);
	Xuint32 i,verde,rojo,azul;

	for(verde = 255; verde >= 0; verde--){
		xil_printf("cambiado a verde: %d\n",verde);
		LEDS_RGB_mWriteSlaveReg0(XPAR_LEDS_RGB_2_BASEADDR,0,255);
		LEDS_RGB_mWriteSlaveReg1(XPAR_LEDS_RGB_2_BASEADDR,0,verde);
		LEDS_RGB_mWriteSlaveReg2(XPAR_LEDS_RGB_2_BASEADDR,0,0);
		delay();
		xil_printf("salgo delay\n");
	}

	for(rojo = 0; rojo <= 255; rojo++){
		xil_printf("cambiado a rojo: %d",rojo);
		LEDS_RGB_mWriteSlaveReg0(XPAR_LEDS_RGB_2_BASEADDR,0,rojo);
		LEDS_RGB_mWriteSlaveReg1(XPAR_LEDS_RGB_2_BASEADDR,0,verde);
		LEDS_RGB_mWriteSlaveReg2(XPAR_LEDS_RGB_2_BASEADDR,0,0);
		//for(i = 0; i < 999999;i++);
		delay();
	}

	for(azul = 255; azul >= 0; azul--){
		xil_printf("cambiado a azul: %d",azul);
		LEDS_RGB_mWriteSlaveReg0(XPAR_LEDS_RGB_2_BASEADDR,0,255);
		LEDS_RGB_mWriteSlaveReg1(XPAR_LEDS_RGB_2_BASEADDR,0,0);
		LEDS_RGB_mWriteSlaveReg2(XPAR_LEDS_RGB_2_BASEADDR,0,azul);
		//for(i = 0; i < 999999;i++);
		delay();
	}


}


int main() 
{


   Xil_ICacheEnable();
   Xil_DCacheEnable();

   print("---Entering main---\n\r");

   

   {
      int status;
      
      print("\r\nRunning Bram Example() for xps_bram_if_cntlr_0...\r\n");

      status = BramExample(XPAR_XPS_BRAM_IF_CNTLR_0_DEVICE_ID);

      if (status == 0) {
         xil_printf("Bram Example PASSED.\r\n");
      }
      else {
         print("Bram Example FAILED.\r\n");
      }
   }

   while(1){
	   xil_printf("paso\n\r");
	   arcoiris();
   }
   /*LEDS_RGB_mWriteSlaveReg0(XPAR_LEDS_RGB_0_BASEADDR,0,0);
   LEDS_RGB_mWriteSlaveReg1(XPAR_LEDS_RGB_0_BASEADDR,0,0);
   LEDS_RGB_mWriteSlaveReg2(XPAR_LEDS_RGB_0_BASEADDR,0,255);


   LEDS_RGB_mWriteSlaveReg0(XPAR_LEDS_RGB_1_BASEADDR,0,0);
   LEDS_RGB_mWriteSlaveReg1(XPAR_LEDS_RGB_1_BASEADDR,0,255);
   LEDS_RGB_mWriteSlaveReg2(XPAR_LEDS_RGB_1_BASEADDR,0,0);

   LEDS_RGB_mWriteSlaveReg0(XPAR_LEDS_RGB_2_BASEADDR,0,255);
   LEDS_RGB_mWriteSlaveReg1(XPAR_LEDS_RGB_2_BASEADDR,0,0);
   LEDS_RGB_mWriteSlaveReg2(XPAR_LEDS_RGB_2_BASEADDR,0,0);
	*/
   
   /*
    * Peripheral SelfTest will not be run for xps_uartlite_0
    * because it has been selected as the STDOUT device
    */


   print("---Exiting main---\n\r");

   Xil_DCacheDisable();
   Xil_ICacheDisable();

   return 0;
}

