/*
 *
 * Xilinx, Inc.
 * XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A 
 * COURTESY TO YOU.  BY PROVIDING THIS DESIGN, CODE, OR INFORMATION AS
 * ONE POSSIBLE   IMPLEMENTATION OF THIS FEATURE, APPLICATION OR 
 * STANDARD, XILINX IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION 
 * IS FREE FROM ANY CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE 
 * FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION
 * XILINX EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO 
 * THE ADEQUACY OF THE IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO 
 * ANY WARRANTIES OR REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE 
 * FROM CLAIMS OF INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY 
 * AND FITNESS FOR A PARTICULAR PURPOSE.
 */

/*
 * 
 *
 * This file is a generated sample test application.
 *
 * This application is intended to test and/or illustrate some 
 * functionality of your system.  The contents of this file may
 * vary depending on the IP in your system and may use existing
 * IP driver functions.  These drivers will be generated in your
 * SDK application project when you run the "Generate Libraries" menu item.
 *
 */


#include <stdio.h>
#include "xparameters.h"
#include "xil_cache.h"
#include "xbasic_types.h"
#include "xbram.h"
#include "bram_header.h"
#include "leds_rgb.h"


#define RED 0
#define GREEN 1
#define BLUE 2
#define LED_0 XPAR_LEDS_RGB_0_BASEADDR
#define LED_1 XPAR_LEDS_RGB_1_BASEADDR
#define LED_2 XPAR_LEDS_RGB_2_BASEADDR

void delay(){
	int c;
	for ( c = 1 ; c <= 1500 ; c++ ){}
}

void fadeUp(Xuint32 led,Xuint32 baseColor, Xuint32 nextColor){

	//xil_printf("base: %d, next: %d\n",baseColor,nextColor);
	int red = 255,green = 255,blue = 255,i;

	if(baseColor == RED)
		red=0;
	else if(baseColor == GREEN)
		green = 0;
	else if(baseColor == BLUE)
		blue = 0;
	//xil_printf("red: %d ,green %d, blue: %d\n",red,green,blue);
	for(i = 255; i >= 0; i--){
		LEDS_RGB_mWriteSlaveReg0(XPAR_LEDS_RGB_2_BASEADDR,0,red);
		LEDS_RGB_mWriteSlaveReg1(XPAR_LEDS_RGB_2_BASEADDR,0,green);
		LEDS_RGB_mWriteSlaveReg2(XPAR_LEDS_RGB_2_BASEADDR,0,blue);
		delay();
		if(nextColor == RED)
			red=red - 1 ;
		else if(nextColor == GREEN)
			green = green - 1;
		else if(nextColor == BLUE)
			blue = blue - 1;
	}
	//xil_printf("red: %d ,green %d, blue: %d\n",red,green,blue);
}

void fadeDown(Xuint32 led,Xuint32 baseColor, Xuint32 nextColor){
	//xil_printf("base: %d, next: %d\n",baseColor,nextColor);
	int red = 255,green = 255,blue = 255,i;

	if(baseColor == RED)
		red=0;
	else if(baseColor == GREEN)
		green = 0;
	else if(baseColor == BLUE)
		blue = 0;
	if(nextColor == RED)
		red=0;
	else if(nextColor == GREEN)
		green = 0;
	else if(nextColor == BLUE)
		blue = 0;

	//xil_printf("red: %d ,green %d, blue: %d\n",red,green,blue);
	for(i = 0; i <= 255; i++){
		LEDS_RGB_mWriteSlaveReg0(XPAR_LEDS_RGB_2_BASEADDR,0,red);
		LEDS_RGB_mWriteSlaveReg1(XPAR_LEDS_RGB_2_BASEADDR,0,green);
		LEDS_RGB_mWriteSlaveReg2(XPAR_LEDS_RGB_2_BASEADDR,0,blue);
		delay();
		if(nextColor == RED)
			red=red + 1 ;
		else if(nextColor == GREEN)
			green = green + 1;
		else if(nextColor == BLUE)
			blue = blue + 1;
	}
	//xil_printf("red: %d ,green %d, blue: %d\n",red,green,blue);
}


void arcoiris(){
	LEDS_RGB_mWriteSlaveReg0(XPAR_LEDS_RGB_2_BASEADDR,0,0);
	LEDS_RGB_mWriteSlaveReg1(XPAR_LEDS_RGB_2_BASEADDR,0,255);
	LEDS_RGB_mWriteSlaveReg2(XPAR_LEDS_RGB_2_BASEADDR,0,255);

	   //xil_printf("rojo max sube verde\n\r");
	   fadeUp(LED_2,RED,GREEN);
	   //xil_printf("verde max baja rojo\n\r");
	   fadeDown(LED_2,GREEN,RED);
	   //xil_printf("verde max sube azul\n\r");
	   fadeUp(LED_2,GREEN,BLUE);
	   //xil_printf("azul max baja verde\n\r");
	   fadeDown(LED_2,BLUE,GREEN);
	   //xil_printf("azul max sube rojo\n\r");
	   fadeUp(LED_2,BLUE,RED);
	   //xil_printf("rojo max baja azul\n\r");
	   fadeDown(LED_2,RED,BLUE);

}


int main() 
{


   Xil_ICacheEnable();
   Xil_DCacheEnable();

   print("---Entering main---\n\r");

   

   {
      int status;
      
      print("\r\nRunning Bram Example() for xps_bram_if_cntlr_0...\r\n");

      status = BramExample(XPAR_XPS_BRAM_IF_CNTLR_0_DEVICE_ID);

      if (status == 0) {
         xil_printf("Bram Example PASSED.\r\n");
      }
      else {
         print("Bram Example FAILED.\r\n");
      }
   }


   LEDS_RGB_mWriteSlaveReg0(XPAR_LEDS_RGB_2_BASEADDR,0,0);
   LEDS_RGB_mWriteSlaveReg1(XPAR_LEDS_RGB_2_BASEADDR,0,255);
   LEDS_RGB_mWriteSlaveReg2(XPAR_LEDS_RGB_2_BASEADDR,0,255);
   while(1){
	   xil_printf("rojo max sube verde\n\r");
	   fadeUp(LED_2,RED,GREEN);
	   xil_printf("verde max baja rojo\n\r");
	   fadeDown(LED_2,GREEN,RED);
	   xil_printf("verde max sube azul\n\r");
	   fadeUp(LED_2,GREEN,BLUE);
	   xil_printf("azul max baja verde\n\r");
	   fadeDown(LED_2,BLUE,GREEN);
	   xil_printf("azul max sube rojo\n\r");
	   fadeUp(LED_2,BLUE,RED);
	   xil_printf("rojo max baja azul\n\r");
	   fadeDown(LED_2,RED,BLUE);
   }

/*
   LEDS_RGB_mWriteSlaveReg0(XPAR_LEDS_RGB_0_BASEADDR,0,255);
   LEDS_RGB_mWriteSlaveReg1(XPAR_LEDS_RGB_0_BASEADDR,0,255);
   LEDS_RGB_mWriteSlaveReg2(XPAR_LEDS_RGB_0_BASEADDR,0,255);


   LEDS_RGB_mWriteSlaveReg0(XPAR_LEDS_RGB_1_BASEADDR,0,0);
   LEDS_RGB_mWriteSlaveReg1(XPAR_LEDS_RGB_1_BASEADDR,0,255);
   LEDS_RGB_mWriteSlaveReg2(XPAR_LEDS_RGB_1_BASEADDR,0,0);

   LEDS_RGB_mWriteSlaveReg0(XPAR_LEDS_RGB_2_BASEADDR,0,255);
   LEDS_RGB_mWriteSlaveReg1(XPAR_LEDS_RGB_2_BASEADDR,0,0);
   LEDS_RGB_mWriteSlaveReg2(XPAR_LEDS_RGB_2_BASEADDR,0,0);
	*/
   
   /*
    * Peripheral SelfTest will not be run for xps_uartlite_0
    * because it has been selected as the STDOUT device
    */


   print("---Exiting main---\n\r");

   Xil_DCacheDisable();
   Xil_ICacheDisable();

   return 0;
}

